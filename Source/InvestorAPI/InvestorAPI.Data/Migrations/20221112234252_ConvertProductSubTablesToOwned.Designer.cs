// <auto-generated />
using System;
using InvestorAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvestorAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221112234252_ConvertProductSubTablesToOwned")]
    partial class ConvertProductSubTablesToOwned
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InvestorData.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountScope")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("CASE\r\n    WHEN [BusinessId] IS NULL\r\n    THEN CASE\r\n        WHEN [BusinessTypeId] IS NULL\r\n        THEN CAST(2 AS INT)\r\n        ELSE CAST(3 AS INT)\r\n    END\r\n    ELSE CAST(1 AS INT)\r\nEND");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InvestorData.Business", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Currency")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("InvestorData.BusinessType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("DisableProducts")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableServices")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("NoInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("SalesOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessTypes");
                });

            modelBuilder.Entity("InvestorData.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InvestorData.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("AmountDue")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsTracked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDue")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("TraderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("TraderId");

                    b.HasIndex("InvoiceType", "TraderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvestorData.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("TraderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TraderId");

                    b.HasIndex("PaymentType", "TraderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("InvestorData.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("InvestorData.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("IsService", "BusinessId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InvestorData.ScaleUnit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScaleUnits");
                });

            modelBuilder.Entity("InvestorData.Trader", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateModified")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("TraderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TraderType", "BusinessId");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("InvestorData.UnitConversion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ConversionValue")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SourceUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SourceUnitId");

                    b.HasIndex("TargetUnitId");

                    b.ToTable("UnitConversions");
                });

            modelBuilder.Entity("InvestorData.Account", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("Accounts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("InvestorData.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId");

                    b.Navigation("Business");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("InvestorData.Business", b =>
                {
                    b.HasOne("InvestorData.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("InvestorData.Category", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("Categories")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Business");
                });

            modelBuilder.Entity("InvestorData.Invoice", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("Invoices")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("InvestorData.Trader", "Trader")
                        .WithMany("Invoices")
                        .HasForeignKey("TraderId");

                    b.OwnsMany("InvestorData.InvoiceItem", "Items", b1 =>
                        {
                            b1.Property<string>("InvoiceId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasPrecision(19, 4)
                                .HasColumnType("decimal(19,4)")
                                .HasComputedColumnSql("[Quantity] * [Price]");

                            b1.Property<string>("Description")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<decimal>("Price")
                                .HasPrecision(19, 4)
                                .HasColumnType("decimal(19,4)");

                            b1.Property<string>("ProductId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Quantity")
                                .HasColumnType("float");

                            b1.HasKey("InvoiceId", "Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("InvoiceItems");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");

                            b1.HasOne("InvestorData.Product", "Product")
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Product");
                        });

                    b.Navigation("Business");

                    b.Navigation("Items");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("InvestorData.Payment", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("Payments")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("InvestorData.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestorData.Trader", "Trader")
                        .WithMany("Payments")
                        .HasForeignKey("TraderId");

                    b.Navigation("Business");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("InvestorData.Product", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("Products")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("InvestorData.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.OwnsOne("InvestorData.InventoryInfo", "InventoryDetails", b1 =>
                        {
                            b1.Property<string>("ProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("InventoryAccountId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Quantity")
                                .HasColumnType("float");

                            b1.Property<double?>("ReorderPoint")
                                .HasColumnType("float");

                            b1.Property<string>("SKU")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("ScaleUnitId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ProductId");

                            b1.HasIndex("InventoryAccountId");

                            b1.HasIndex("ScaleUnitId");

                            b1.ToTable("InventoryInfos");

                            b1.HasOne("InvestorData.Account", "InventoryAccount")
                                .WithMany()
                                .HasForeignKey("InventoryAccountId");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("InvestorData.ScaleUnit", "ScaleUnit")
                                .WithMany()
                                .HasForeignKey("ScaleUnitId");

                            b1.Navigation("InventoryAccount");

                            b1.Navigation("ScaleUnit");
                        });

                    b.OwnsOne("InvestorData.TradingInfo", "PurchasingInformation", b1 =>
                        {
                            b1.Property<string>("ProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AccountId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Description")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<decimal>("Price")
                                .HasPrecision(19, 4)
                                .HasColumnType("decimal(19,4)");

                            b1.HasKey("ProductId");

                            b1.HasIndex("AccountId");

                            b1.ToTable("PurchasingInfos", (string)null);

                            b1.HasOne("InvestorData.Account", "Account")
                                .WithMany()
                                .HasForeignKey("AccountId");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Account");
                        });

                    b.OwnsOne("InvestorData.TradingInfo", "SalesInformation", b1 =>
                        {
                            b1.Property<string>("ProductId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AccountId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Description")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<decimal>("Price")
                                .HasPrecision(19, 4)
                                .HasColumnType("decimal(19,4)");

                            b1.HasKey("ProductId");

                            b1.HasIndex("AccountId");

                            b1.ToTable("SalesInfos", (string)null);

                            b1.HasOne("InvestorData.Account", "Account")
                                .WithMany()
                                .HasForeignKey("AccountId");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("Business");

                    b.Navigation("Category");

                    b.Navigation("InventoryDetails");

                    b.Navigation("PurchasingInformation");

                    b.Navigation("SalesInformation");
                });

            modelBuilder.Entity("InvestorData.ScaleUnit", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("ScaleUnits")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Business");
                });

            modelBuilder.Entity("InvestorData.Trader", b =>
                {
                    b.HasOne("InvestorData.Business", "Business")
                        .WithMany("Traders")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("InvestorData.Address", "Address", b1 =>
                        {
                            b1.Property<string>("TraderId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AddressLine1")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("City")
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)");

                            b1.Property<string>("Province")
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("TraderId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("TraderId");
                        });

                    b.OwnsOne("InvestorData.Contact", "Contact", b1 =>
                        {
                            b1.Property<string>("TraderId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Email")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("LastName")
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<string>("Phone")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)");

                            b1.HasKey("TraderId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("TraderId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Business");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("InvestorData.UnitConversion", b =>
                {
                    b.HasOne("InvestorData.ScaleUnit", "SourceUnit")
                        .WithMany()
                        .HasForeignKey("SourceUnitId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("InvestorData.ScaleUnit", "TargetUnit")
                        .WithMany()
                        .HasForeignKey("TargetUnitId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("SourceUnit");

                    b.Navigation("TargetUnit");
                });

            modelBuilder.Entity("InvestorData.Business", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Categories");

                    b.Navigation("Invoices");

                    b.Navigation("Payments");

                    b.Navigation("Products");

                    b.Navigation("ScaleUnits");

                    b.Navigation("Traders");
                });

            modelBuilder.Entity("InvestorData.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InvestorData.Trader", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
